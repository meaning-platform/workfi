/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { IWorkFi, IWorkFiInterface } from "../../contracts/IWorkFi";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "bountyId",
        type: "uint256",
      },
    ],
    name: "acceptPayment",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "bountyId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "worker",
        type: "address",
      },
    ],
    name: "acceptWorker",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "stablePay",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "nativePay",
        type: "uint128",
      },
      {
        internalType: "uint96",
        name: "exchangeRate",
        type: "uint96",
      },
      {
        internalType: "address",
        name: "nativeToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    name: "createBounty",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "bountyId",
        type: "uint256",
      },
    ],
    name: "getBounty",
    outputs: [
      {
        components: [
          {
            internalType: "uint128",
            name: "stablePay",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "nativePay",
            type: "uint128",
          },
          {
            internalType: "uint96",
            name: "exchangeRate",
            type: "uint96",
          },
          {
            internalType: "address",
            name: "nativeToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "worker",
            type: "address",
          },
          {
            internalType: "address",
            name: "recruiter",
            type: "address",
          },
          {
            internalType: "bool",
            name: "isCompleted",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "hasWorkerBeenPaid",
            type: "bool",
          },
        ],
        internalType: "struct IWorkFi.BountyMetadata",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "bountyId",
        type: "uint256",
      },
    ],
    name: "getInvestment",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "bountyId",
        type: "uint256",
      },
      {
        internalType: "uint128",
        name: "stableAmount",
        type: "uint128",
      },
    ],
    name: "invest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "bountyId",
        type: "uint256",
      },
    ],
    name: "markBountyAsCompleted",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class IWorkFi__factory {
  static readonly abi = _abi;
  static createInterface(): IWorkFiInterface {
    return new utils.Interface(_abi) as IWorkFiInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IWorkFi {
    return new Contract(address, _abi, signerOrProvider) as IWorkFi;
  }
}
